// <auto-generated />
using System;
using BikeClub.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace bike_club_api.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20200913033549_InitalCreate")]
    partial class InitalCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("BikeClub.Models.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.Property<string>("Complement")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("nvarchar(2)")
                        .HasMaxLength(2);

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("ZipCode")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("BikeClub.Models.Bike", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(300)")
                        .HasMaxLength(300);

                    b.Property<decimal>("FrameSize")
                        .HasColumnType("decimal(3,1)");

                    b.Property<int>("Gears")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasMaxLength(36)
                        .HasDefaultValue(0);

                    b.Property<string>("GenderCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(1)");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<decimal>("Price")
                        .HasColumnType("money");

                    b.Property<decimal>("RimSize")
                        .HasColumnType("decimal(3,1)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("GenderCode");

                    b.ToTable("Bikes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 2,
                            Description = "The classic mountain bike. Equipped with front suspension, V-Brake and aluminum frame.",
                            FrameSize = 17.5m,
                            Gears = 18,
                            GenderCode = "M",
                            Image = "mountain1.png",
                            Model = "Silver Mountain",
                            Price = 600.90m,
                            RimSize = 27.5m
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 3,
                            Description = "Versatile model, classified as hybrid. Equipped with front suspension, V-Brake, aluminum frame.",
                            FrameSize = 17.5m,
                            Gears = 10,
                            GenderCode = "M",
                            Image = "mountain2.png",
                            Model = "Mechanical Orange",
                            Price = 450.90m,
                            RimSize = 27.5m
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 3,
                            Description = "Advanced hybrid model. Equipped with front suspension, disc brakes, aluminum frame.",
                            FrameSize = 17.5m,
                            Gears = 21,
                            GenderCode = "M",
                            Image = "mountain3.png",
                            Model = "Blue Sky",
                            Price = 1200.90m,
                            RimSize = 27.5m
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 2,
                            Description = "The winter bike. Equipped with larger, non-slip special tires, disc brakes, aluminum frame.",
                            FrameSize = 17.5m,
                            Gears = 21,
                            GenderCode = "M",
                            Image = "mountain4.png",
                            Model = "Snow Mountain",
                            Price = 1400.90m,
                            RimSize = 29.0m
                        },
                        new
                        {
                            Id = 5,
                            CategoryId = 4,
                            Description = "The classic bicycle for tours. Equipped with V-Brake brakes, aluminum frame, and rear and front load support.",
                            FrameSize = 17.5m,
                            Gears = 18,
                            GenderCode = "M",
                            Image = "tour1.png",
                            Model = "Orange Tour",
                            Price = 380.90m,
                            RimSize = 27.5m
                        },
                        new
                        {
                            Id = 6,
                            CategoryId = 2,
                            Description = "Silver mountain's advanced model. Equipped with RockShox front suspension, disc brakes, carbon fiber frame.",
                            FrameSize = 17.5m,
                            Gears = 21,
                            GenderCode = "M",
                            Image = "mountain5.png",
                            Model = "Silver Mountain II",
                            Price = 2390.90m,
                            RimSize = 29.0m
                        },
                        new
                        {
                            Id = 7,
                            CategoryId = 2,
                            Description = "The top of mountain bikes. Equipped with RockShox front suspension, disc brakes, carbon fiber frame and Maxxis Minion tires.",
                            FrameSize = 17.5m,
                            Gears = 36,
                            GenderCode = "M",
                            Image = "mountain6.png",
                            Model = "Scarlet Mountain",
                            Price = 5790.90m,
                            RimSize = 29.0m
                        },
                        new
                        {
                            Id = 8,
                            CategoryId = 1,
                            Description = "Classic road model. Equipped with V-brake and aluminum frame.",
                            FrameSize = 17.5m,
                            Gears = 10,
                            GenderCode = "M",
                            Image = "road1.png",
                            Model = "Orange Speed",
                            Price = 350.00m,
                            RimSize = 27.5m
                        },
                        new
                        {
                            Id = 9,
                            CategoryId = 1,
                            Description = "The top of road bikes. Equipped with disc brakes, carbon fiber frame and thin tires.",
                            FrameSize = 17.5m,
                            Gears = 21,
                            GenderCode = "M",
                            Image = "road2.png",
                            Model = "Scarlet Speed",
                            Price = 6100.90m,
                            RimSize = 29.0m
                        },
                        new
                        {
                            Id = 10,
                            CategoryId = 1,
                            Description = "Advanced road bike model. Equipped with disc brakes and aluminum frame.",
                            FrameSize = 17.5m,
                            Gears = 18,
                            GenderCode = "M",
                            Image = "road3.png",
                            Model = "Yellow Speed",
                            Price = 2200.90m,
                            RimSize = 29.0m
                        },
                        new
                        {
                            Id = 11,
                            CategoryId = 1,
                            Description = "Root road model. Equipped with V-Brake and aluminum frame.",
                            FrameSize = 17.5m,
                            Gears = 0,
                            GenderCode = "M",
                            Image = "road4.png",
                            Model = "Green Speed",
                            Price = 500.0m,
                            RimSize = 27.5m
                        },
                        new
                        {
                            Id = 12,
                            CategoryId = 1,
                            Description = "Root road model. Equipped with V-Brake and aluminum frame.",
                            FrameSize = 17.5m,
                            Gears = 0,
                            GenderCode = "M",
                            Image = "road5.png",
                            Model = "Blue Speed",
                            Price = 500.0m,
                            RimSize = 29.0m
                        },
                        new
                        {
                            Id = 13,
                            CategoryId = 1,
                            Description = "Special and exclusive model of Road bike. Equipped with disc brakes, carbon fiber frame and thin tires.",
                            FrameSize = 17.5m,
                            Gears = 36,
                            GenderCode = "M",
                            Image = "road6.png",
                            Model = "Black Widow",
                            Price = 9000.0m,
                            RimSize = 29.0m
                        },
                        new
                        {
                            Id = 14,
                            CategoryId = 3,
                            Description = "More versatile hybrid bike. Equipped with V-Brake brakes and aluminum frame",
                            FrameSize = 17.5m,
                            Gears = 18,
                            GenderCode = "M",
                            Image = "tour2.png",
                            Model = "Gray Tour",
                            Price = 450.0m,
                            RimSize = 27.5m
                        },
                        new
                        {
                            Id = 15,
                            CategoryId = 4,
                            Description = "Root tour bike. Equipped with V-Brake brakes, aluminum frame and rear load support",
                            FrameSize = 17.5m,
                            Gears = 0,
                            GenderCode = "M",
                            Image = "tour3.png",
                            Model = "Green Tour",
                            Price = 550.0m,
                            RimSize = 27.5m
                        },
                        new
                        {
                            Id = 16,
                            CategoryId = 4,
                            Description = "Advanced tour bike. Equipped with V-Brake brakes and carbon fiber frame",
                            FrameSize = 17.5m,
                            Gears = 18,
                            GenderCode = "M",
                            Image = "tour4.png",
                            Model = "Green Tour II",
                            Price = 950.0m,
                            RimSize = 29.9m
                        },
                        new
                        {
                            Id = 17,
                            CategoryId = 7,
                            Description = "Eletric tour bike. Equipped with V-Brake brakes and carbon fiber frame, powerfull front light and rear load support",
                            FrameSize = 17.5m,
                            Gears = 21,
                            GenderCode = "M",
                            Image = "tour5.png",
                            Model = "Green Eletric",
                            Price = 3000.0m,
                            RimSize = 27.5m
                        },
                        new
                        {
                            Id = 18,
                            CategoryId = 7,
                            Description = "Eletric tour bike. Equipped with V-Brake brakes and carbon fiber frame, powerfull front light, rear and front load support",
                            FrameSize = 17.5m,
                            Gears = 0,
                            GenderCode = "F",
                            Image = "tour6.png",
                            Model = "Orange Eletric",
                            Price = 3200.0m,
                            RimSize = 27.5m
                        },
                        new
                        {
                            Id = 19,
                            CategoryId = 4,
                            Description = "Root tour bike. Equipped with V-Brake brakes and aluminum frame, rear and front load support",
                            FrameSize = 17.5m,
                            Gears = 0,
                            GenderCode = "M",
                            Image = "tour7.png",
                            Model = "Blue Tour",
                            Price = 600.0m,
                            RimSize = 29.0m
                        },
                        new
                        {
                            Id = 20,
                            CategoryId = 4,
                            Description = "Special tour bike. Equipped with V-Brake brakes and aluminum frame, rear and front load support",
                            FrameSize = 17.5m,
                            Gears = 6,
                            GenderCode = "F",
                            Image = "tour8.png",
                            Model = "Pink Tour",
                            Price = 400.0m,
                            RimSize = 27.5m
                        });
                });

            modelBuilder.Entity("BikeClub.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(15)")
                        .HasMaxLength(15);

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Road"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Mountain"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Hybrid"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Touring"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Folding"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Women's"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Eletric"
                        });
                });

            modelBuilder.Entity("BikeClub.Models.Difficulty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(15)")
                        .HasMaxLength(15);

                    b.HasKey("Id");

                    b.ToTable("Difficulties");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Very Easy"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Easy"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Medium"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Hard"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Very Hard"
                        });
                });

            modelBuilder.Entity("BikeClub.Models.Gender", b =>
                {
                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(1)")
                        .HasMaxLength(1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.HasKey("Code");

                    b.ToTable("Genders");

                    b.HasData(
                        new
                        {
                            Code = "M",
                            Description = "Male"
                        },
                        new
                        {
                            Code = "F",
                            Description = "Female"
                        });
                });

            modelBuilder.Entity("BikeClub.Models.Purchase", b =>
                {
                    b.Property<int>("BikeId")
                        .HasColumnType("int");

                    b.Property<int>("ShopCartId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("BikeId", "ShopCartId");

                    b.HasIndex("ShopCartId");

                    b.ToTable("Purchases");
                });

            modelBuilder.Entity("BikeClub.Models.Role", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("Name");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Name = "Monitor",
                            Description = "Monitor, responsible for managing the tours"
                        },
                        new
                        {
                            Name = "Cyclist",
                            Description = "Cyclist is the common user"
                        });
                });

            modelBuilder.Entity("BikeClub.Models.ShopCart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AddressId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("PurchaseDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("money");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("UserId");

                    b.ToTable("ShopCarts");
                });

            modelBuilder.Entity("BikeClub.Models.Tour", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AddressId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(300)")
                        .HasMaxLength(300);

                    b.Property<int>("DifficultyId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("EndDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("MonitorId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("StartDate")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("DifficultyId");

                    b.HasIndex("MonitorId");

                    b.ToTable("Tours");
                });

            modelBuilder.Entity("BikeClub.Models.TourParticipant", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("TourId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "TourId");

                    b.HasIndex("TourId");

                    b.ToTable("TourParticipants");
                });

            modelBuilder.Entity("BikeClub.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("GenderCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(1)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasMaxLength(8000);

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.HasIndex("GenderCode");

                    b.HasIndex("RoleName");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "administrator@administrator.com",
                            GenderCode = "M",
                            LastName = "Master",
                            Name = "Admin",
                            Password = "1lFqy5Swsz77Zh/Us7s2uMNMW+Fwhjl8PyhcDR2cpoU=",
                            Phone = "(99)99999-9999",
                            RoleName = "Monitor"
                        });
                });

            modelBuilder.Entity("BikeClub.Models.Bike", b =>
                {
                    b.HasOne("BikeClub.Models.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BikeClub.Models.Gender", "Gender")
                        .WithMany()
                        .HasForeignKey("GenderCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BikeClub.Models.Purchase", b =>
                {
                    b.HasOne("BikeClub.Models.Bike", "Bike")
                        .WithMany("Purchases")
                        .HasForeignKey("BikeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BikeClub.Models.ShopCart", "ShopCart")
                        .WithMany("Purchases")
                        .HasForeignKey("ShopCartId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("BikeClub.Models.ShopCart", b =>
                {
                    b.HasOne("BikeClub.Models.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BikeClub.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BikeClub.Models.Tour", b =>
                {
                    b.HasOne("BikeClub.Models.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BikeClub.Models.Difficulty", "Difficulty")
                        .WithMany()
                        .HasForeignKey("DifficultyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BikeClub.Models.User", "Monitor")
                        .WithMany()
                        .HasForeignKey("MonitorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BikeClub.Models.TourParticipant", b =>
                {
                    b.HasOne("BikeClub.Models.Tour", "Tour")
                        .WithMany("TourParticipants")
                        .HasForeignKey("TourId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BikeClub.Models.User", "User")
                        .WithMany("TourParticipants")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("BikeClub.Models.User", b =>
                {
                    b.HasOne("BikeClub.Models.Gender", "Gender")
                        .WithMany()
                        .HasForeignKey("GenderCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BikeClub.Models.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
